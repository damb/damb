#!/bin/bash

# helper functions to manage my development docker container

DEV2_IMAGE="docker.anybotics.com/anybotics-infrastructure/docker-images/jazzy/anymal-development-colcon:master"


# Start the development container with the name "dev"
dev2_start() {
  docker start dev2
}

# Run a new development container with the name "dev2"
dev2_run() {
  # Mount /tmp/.X11-unix and /run/user/1000 to support running GUIs inside the container.
  # Mount auth.conf.d for apt authentication.
  # Mount dbus socket for system services (such as avahi)
  # Mount avahi daemon socket for mDNS (used by anymal_setup)
  # -v $HOME/work/docker/dev2/home/.bash_history_docker:/home/anydev/.bash_history:rw \
  docker run -it \
    -v ${HOME}/work:/home/anydev/work:rw \
    -v $HOME/.dotfiles:/home/anydev/.dotfiles:rw \
    -v $HOME/.ssh:/home/anydev/.ssh:ro \
    -v $HOME/bin:/home/anydev/bin:rw \
    -v $HOME/tmp:/home/anydev/tmp:rw \
    -v $HOME/.dotfiles/system/dev2/config/.vscode-server:/home/anydev/.vscode-server:rw \
    -v $HOME/ANYmal:/home/anydev/ANYmal:rw \
    -v /dev/shm:/dev/shm \
    -v /etc/apt/auth.conf.d:/etc/apt/auth.conf.d/:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v /run/user/1000:/run/user/1000 \
    -v /var/run/avahi-daemon:/var/run/avahi-daemon \
    -v /run/dbus/system_bus_socket:/run/dbus/system_bus_socket \
    -e "TERM=xterm-256color" \
    -e NVIDIA_VISIBLE_DEVICES=all \
    -e NVIDIA_DRIVER_CAPABILITIES=all \
    -e QT_X11_NO_MITSHM=1 \
    -e DISPLAY=${DISPLAY} \
    -e HOST_IP=$(hostname -I | awk '{print $1}') \
    -e XDG_RUNTIME_DIR=/run/user/1000 \
    --net=host --ipc=host --pid=host \
    --ulimit rtprio=99 \
    --ulimit core=-1 \
    --privileged \
    --gpus=all \
    --runtime=nvidia \
    --cap-add=SYS_PTRACE \
    --security-opt seccomp=unconfined \
    --group-add=dialout \
    --group-add=video \
    --group-add=audio \
    --group-add=plugdev \
    --name dev2 \
    --workdir /home/anydev \
    ${DEV2_IMAGE} \
    /bin/bash
    # /bin/bash /home/anydev/.dotfiles/system/dev2/customize.sh
}

# pull docker container from ANYbotics registry
dev2_pull() {  
  docker pull $DEV2_IMAGE
}

# stop the dev container
dev2_stop() {
  docker kill dev2
  if [[ "$1" == "--rm" ]]; then
    docker rm dev2
  fi
}

# run a command in the dev container
dev2_exec() {
  if ! docker ps --format '{{.Names}}' | grep -q '^dev2$'; then
    echo "Container 'dev2' is not running. Starting it now ..."
    dev2_start
  fi
  docker exec -it -u anydev -w /home/anydev dev2 $@
}

dev2() {
  if [[ $# -gt 0 ]]; then
    case $1 in
      "pull")
        shift # consume argument
        dev2_pull $@
        ;;
      "start")
        shift # consume argument
        dev2_start $@
        ;;
      "run")
        shift # consume argument
        dev2_run $@
        ;;
      "stop")
        shift # consume argument
        dev2_stop $@
        ;;
      "exec")
        shift # consume argument
        dev2_exec $@
        ;;
    esac
  else
    dev2_exec bash
  fi
}
